diff --git a/cctbx_project/libtbx/load_env.py b/cctbx_project/libtbx/load_env.py
index faf9349924..64e7400ccf 100644
--- a/cctbx_project/libtbx/load_env.py
+++ b/cctbx_project/libtbx/load_env.py
@@ -1,26 +1,47 @@
-from __future__ import absolute_import, division, print_function
+from pathlib import Path
+
 import libtbx
-import libtbx.env_config
-import os
-libtbx.env = libtbx.env_config.unpickle()
-libtbx.env.set_os_environ_all_dist()
-libtbx.env.dispatcher_name = os.environ.get("LIBTBX_DISPATCHER_NAME")
-if not libtbx.env.dispatcher_name:
-  # Attempt to identify dispatcher name if LIBTBX_DISPATCHER_NAME is not set
-  try:
-    import inspect
-    _frame = inspect.stack()[1]
-    _module = inspect.getmodule(_frame[0])
-    _sourcefile = os.path.realpath(_module.__file__)
-    for _dist_path in [os.path.realpath(_d) for _d in libtbx.env.dist_paths()]:
-      if _sourcefile.startswith(_dist_path):
-        _command = '.'.join([ _dist_path.split(os.path.sep)[-1] ] + list(filter(lambda x: x and x != 'command_line', _sourcefile[len(_dist_path):].split(os.path.sep))))
-        for _ext in ('.pyo', '.pyc', '.py'):
-          if _command.endswith(_ext):
-            _command = _command[:-len(_ext)]
-        libtbx.env.dispatcher_name = _command
-        break
-  except Exception: # intentional
-    pass # If anything goes wrong - give up silently
-
-libtbx.env.full_testing = os.environ.get("LIBTBX_FULL_TESTING") is not None
+import entrypoints
+import pkgutil
+
+
+class Environment:
+    """
+    A replacement libtbx.env object that doesn't need configuration.
+
+    Designed to work via a mix of entry points and sane defaults for things
+    that shouldn't matter anyway.
+    """
+
+    def under_base(self, path: str) -> str:
+        # Not entirely sure what is appropriate here; we don't have the
+        # concept of a base dir.
+        return str(Path("/no/defined/canonical/base") / path)
+
+    def under_build(self, path: str) -> str:
+        """No concept of build, except the in-place site-packages
+
+        For now, return a dummy but leave open to returning site packages.
+        """
+        # return Path(libtbx.__path__[0]).parent / path
+        return str(Path("/no/defined/canonical/build") / path)
+
+    def dist_path(self, module: str) -> str:
+        entrypoint = entrypoints.get_single("libtbx.module", module)
+        # Work out where this will be, without importing
+        package = pkgutil.get_loader(entrypoint.module_name)
+        if not package:
+            raise RuntimeError(f"Could not find module {module}")
+        return str(Path(package.path).parent)
+
+    def has_module(self, name: str) -> bool:
+        try:
+            entrypoint = entrypoints.get_single("libtbx.module", name)
+            return True
+        except entrypoints.NoSuchEntryPoint:
+            return False
+
+    def under_dist(self, module_name: str, path: str) -> str:
+        return str(Path(self.dist_path(module_name))/path)
+
+libtbx.env = Environment()

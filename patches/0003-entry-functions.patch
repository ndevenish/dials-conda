diff --git a/dials/command_line/align_crystal.py b/dials/command_line/align_crystal.py
index 66617d53b..e20909e93 100644
--- a/dials/command_line/align_crystal.py
+++ b/dials/command_line/align_crystal.py
@@ -13,6 +13,7 @@
 from rstbx.cftbx.coordinate_frame_helpers import align_reference_frame
 from scitbx import matrix
 
+import dials.util
 from dials.algorithms.refinement import rotation_decomposition
 from dials.util import tabulate
 from dials.util.options import OptionParser, flatten_experiments
@@ -351,7 +352,8 @@ def __str__(self):
         return "\n".join(output)
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.align_crystal [options] models.expt"
     parser = OptionParser(
         usage=usage,
@@ -361,7 +363,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     experiments = flatten_experiments(params.input.experiments)
 
     if len(experiments) == 0:
@@ -429,4 +431,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/anvil_correction.py b/dials/command_line/anvil_correction.py
index 30da0b1a5..fa260614c 100644
--- a/dials/command_line/anvil_correction.py
+++ b/dials/command_line/anvil_correction.py
@@ -264,7 +264,8 @@ def correct_intensities_for_dac_attenuation(
                 pass
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) -> None
+@dials.util.show_mail_handle_errors()
+def run(args: List[str] = None, phil: libtbx.phil.scope = phil_scope) -> None:
     """
     Run dials.anvil_correction as from the command line.
 
@@ -359,5 +360,4 @@ def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) ->
 
 # Keep this minimal.  Try to keep the command-line behaviour neatly encapsulated in run.
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/apply_mask.py b/dials/command_line/apply_mask.py
index 332be8ded..d6b768de3 100644
--- a/dials/command_line/apply_mask.py
+++ b/dials/command_line/apply_mask.py
@@ -6,7 +6,7 @@
 from dxtbx.format.image import ImageBool
 from iotbx.phil import parse
 
-from dials.util import show_mail_handle_errors
+import dials.util
 
 help_message = """
 
@@ -56,13 +56,13 @@ def __init__(self):
             usage=usage, epilog=help_message, phil=phil_scope, read_experiments=True
         )
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         from dials.util import Sorry
         from dials.util.options import flatten_experiments
 
         # Parse the command line arguments
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         experiments = flatten_experiments(params.input.experiments)
 
         # Check that an experiment list and at least one mask file have been provided
@@ -99,7 +99,11 @@ def run(self):
         experiments.as_file(filename=params.output.experiments)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/assign_experiment_identifiers.py b/dials/command_line/assign_experiment_identifiers.py
index ea2662239..f6decb101 100644
--- a/dials/command_line/assign_experiment_identifiers.py
+++ b/dials/command_line/assign_experiment_identifiers.py
@@ -33,6 +33,7 @@
 )
 
 
+@show_mail_handle_errors()
 def run(args=None):
     """Run assign experiment identifiers from the command line."""
     usage = (
@@ -78,5 +79,4 @@ def run(args=None):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/augment_spots.py b/dials/command_line/augment_spots.py
index cda1a621a..c856c793c 100644
--- a/dials/command_line/augment_spots.py
+++ b/dials/command_line/augment_spots.py
@@ -2,6 +2,7 @@
 
 import iotbx.phil
 
+import dials.util
 from dials.array_family import flex
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
@@ -85,7 +86,8 @@ def augment_reflections(reflections, params, experiments=None):
     return reflections
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util import Sorry
 
     usage = "dials.augment_spots [options] [models.expt] strong.refl"
@@ -99,7 +101,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
@@ -116,6 +118,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/background.py b/dials/command_line/background.py
index 7dc055529..804cc684d 100644
--- a/dials/command_line/background.py
+++ b/dials/command_line/background.py
@@ -4,14 +4,13 @@
 from __future__ import absolute_import, division, print_function
 
 import math
-import sys
 
 import iotbx.phil
 from scitbx.array_family import flex
 
 from dials.algorithms.spot_finding.factory import SpotFinderFactory
 from dials.algorithms.spot_finding.factory import phil_scope as spot_phil
-from dials.util import Sorry
+from dials.util import Sorry, show_mail_handle_errors
 
 help_message = """
 
@@ -43,11 +42,8 @@
 )
 
 
-def main():
-    run(sys.argv[1:])
-
-
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.background [options] image_*.cbf"
@@ -56,7 +52,7 @@ def run(args):
         usage=usage, phil=phil_scope, read_experiments=True, epilog=help_message
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     # Ensure we have either a data block or an experiment list
     experiments = flatten_experiments(params.input.experiments)
@@ -210,4 +206,4 @@ def background(imageset, indx, n_bins, corrected=False, mask_params=None):
 
 
 if __name__ == "__main__":
-    main()
+    run()
diff --git a/dials/command_line/check_indexing_symmetry.py b/dials/command_line/check_indexing_symmetry.py
index 11bbf7f88..5874d9dd0 100644
--- a/dials/command_line/check_indexing_symmetry.py
+++ b/dials/command_line/check_indexing_symmetry.py
@@ -2,7 +2,6 @@
 
 import logging
 import math
-import sys
 
 import iotbx.phil
 from cctbx import sgtbx
@@ -13,7 +12,7 @@
 
 from dials.algorithms.symmetry import origin
 from dials.array_family import flex
-from dials.util import log
+from dials.util import log, show_mail_handle_errors
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 from dials.util.version import dials_version
 
@@ -294,7 +293,8 @@ def test_P1_crystal_indexing(reflections, experiment, params):
     return
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.check_indexing_symmetry [options] indexed.expt indexed.refl"
 
     parser = OptionParser(
@@ -306,7 +306,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     # Configure the logging
     log.config(logfile=params.output.log)
@@ -343,4 +343,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/cluster_exec.py b/dials/command_line/cluster_exec.py
index baf72d3d7..c4b4329ae 100644
--- a/dials/command_line/cluster_exec.py
+++ b/dials/command_line/cluster_exec.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import, division, print_function
 
+import dials.util
+
 
 def get_cwd():
     """
@@ -28,7 +30,8 @@ def get_tid():
         raise KeyError("Could not find task id")
 
 
-if __name__ == "__main__":
+@dials.util.show_mail_handle_errors()
+def run(_=None):
     import traceback
     from os.path import exists, join
     from time import sleep
@@ -60,3 +63,7 @@ def get_tid():
     # Dump the result
     with open(output_fn, "wb") as outfile:
         pickle.dump(result, outfile, protocol=pickle.HIGHEST_PROTOCOL)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/cluster_unit_cell.py b/dials/command_line/cluster_unit_cell.py
index 924e8e6f3..e9763fed3 100644
--- a/dials/command_line/cluster_unit_cell.py
+++ b/dials/command_line/cluster_unit_cell.py
@@ -3,7 +3,6 @@
 from __future__ import absolute_import, division, print_function
 
 import os
-import sys
 
 import iotbx.mtz
 import iotbx.phil
@@ -11,6 +10,7 @@
 from xfel.clustering.cluster import Cluster
 from xfel.clustering.cluster_groups import unit_cell_info
 
+import dials.util
 from dials.util.options import OptionParser, flatten_experiments
 
 help_message = """
@@ -34,7 +34,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.cluster_unit_cell [options] models.expt"
 
     parser = OptionParser(
@@ -46,7 +47,7 @@ def run(args):
     )
 
     params, options, args = parser.parse_args(
-        show_diff_phil=True, return_unhandled=True
+        args, show_diff_phil=True, return_unhandled=True
     )
     experiments = flatten_experiments(params.input.experiments)
     crystal_symmetries = []
@@ -111,4 +112,4 @@ def do_cluster_analysis(crystal_symmetries, params):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/combine_experiments.py b/dials/command_line/combine_experiments.py
index 6d9c98deb..cd63b4b3a 100644
--- a/dials/command_line/combine_experiments.py
+++ b/dials/command_line/combine_experiments.py
@@ -389,9 +389,9 @@ def __init__(self):
             epilog=help_message,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         self.run_with_preparsed(params, options)
 
     def run_with_preparsed(self, params, options):
@@ -798,7 +798,11 @@ def _save_output(self, experiments, reflections, exp_name, refl_name):
         reflections.as_file(refl_name)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/compare_orientation_matrices.py b/dials/command_line/compare_orientation_matrices.py
index 9e6ad4c4f..6c34fdc85 100644
--- a/dials/command_line/compare_orientation_matrices.py
+++ b/dials/command_line/compare_orientation_matrices.py
@@ -1,11 +1,10 @@
 from __future__ import absolute_import, division, print_function
 
-import sys
-
 import iotbx.phil
 from cctbx.array_family import flex
 
 import dials.algorithms.indexing.compare_orientation_matrices
+import dials.util
 from dials.util.options import OptionParser, flatten_experiments
 
 help_message = """
@@ -39,7 +38,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.compare_orientation_matrices [options] models.expt"
 
     parser = OptionParser(
@@ -50,7 +50,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     experiments = flatten_experiments(params.input.experiments)
     if len(experiments) <= 1:
         parser.print_help()
@@ -73,4 +73,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/complete_full_sphere.py b/dials/command_line/complete_full_sphere.py
index 209df8ca3..a6374c99b 100644
--- a/dials/command_line/complete_full_sphere.py
+++ b/dials/command_line/complete_full_sphere.py
@@ -53,8 +53,8 @@ def __init__(self):
             read_experiments=True,
         )
 
-    def run(self):
-        params, options = self.parser.parse_args(show_diff_phil=True)
+    def run(self, args=None):
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         log.config(logfile="dials.complete_full_sphere.log")
 
         model_shadow = params.shadow
@@ -232,7 +232,11 @@ def write_expt(self, experiments, filename):
         experiments.as_file(filename)
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/compute_delta_cchalf.py b/dials/command_line/compute_delta_cchalf.py
index 39ab7c54d..ca6cfa645 100644
--- a/dials/command_line/compute_delta_cchalf.py
+++ b/dials/command_line/compute_delta_cchalf.py
@@ -87,6 +87,7 @@
 )
 
 
+@show_mail_handle_errors()
 def run(args=None, phil=phil_scope):
     """Run the command-line script."""
 
@@ -139,5 +140,4 @@ def run(args=None, phil=phil_scope):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/convert_to_cbf.py b/dials/command_line/convert_to_cbf.py
index 6ba0b80bc..982037c30 100644
--- a/dials/command_line/convert_to_cbf.py
+++ b/dials/command_line/convert_to_cbf.py
@@ -4,6 +4,8 @@
 
 import iotbx.phil
 
+import dials.util
+
 help_message = """
 
 Convert data which can be read by DIALS, given a experiment list, to CBF format -
@@ -40,7 +42,8 @@ def convert_to_cbf(imageset, template):
         )
 
 
-def run():
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.convert_to_cbf [options] models.expt"
@@ -54,7 +57,7 @@ def run():
     )
 
     params, options, args = parser.parse_args(
-        show_diff_phil=True, return_unhandled=True
+        args, show_diff_phil=True, return_unhandled=True
     )
 
     template = params.output.template
diff --git a/dials/command_line/cosym.py b/dials/command_line/cosym.py
index a8bc5b321..486fd3609 100644
--- a/dials/command_line/cosym.py
+++ b/dials/command_line/cosym.py
@@ -316,7 +316,8 @@ def _unit_cell_clustering(self, experiments):
 """
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.cosym [options] models.expt observations.refl"
 
     parser = OptionParser(
@@ -376,5 +377,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/create_profile_model.py b/dials/command_line/create_profile_model.py
index 8991cfcaa..3cb41f66b 100644
--- a/dials/command_line/create_profile_model.py
+++ b/dials/command_line/create_profile_model.py
@@ -54,7 +54,7 @@ def __init__(self):
             check_format=False,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         from dials.algorithms.profile_model.factory import ProfileModelFactory
         from dials.array_family import flex
@@ -65,7 +65,7 @@ def run(self):
         log.config()
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         reflections, experiments = reflections_and_experiments_from_files(
             params.input.reflections, params.input.experiments
         )
@@ -218,7 +218,11 @@ def filter_reference_pixels(self, reference, experiments):
         return reference
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/damage_analysis.py b/dials/command_line/damage_analysis.py
index b5c44213d..ddcfdf62b 100644
--- a/dials/command_line/damage_analysis.py
+++ b/dials/command_line/damage_analysis.py
@@ -278,7 +278,8 @@ def make_html_report(self, html_filename=None, json_filename=None):
                 json.dump(data, outfile)
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
+@show_mail_handle_errors()
+def run(args: List[str] = None, phil: phil.scope = phil_scope) -> None:
     """Run the command-line script."""
 
     usage = "dials.damage_analysis [options] scaled.expt scaled.refl | scaled.mtz"
@@ -335,5 +336,4 @@ def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/detect_blanks.py b/dials/command_line/detect_blanks.py
index 8e05f902d..d57b77a31 100644
--- a/dials/command_line/detect_blanks.py
+++ b/dials/command_line/detect_blanks.py
@@ -4,7 +4,7 @@
 
 import libtbx.phil
 
-from dials.util import detect_blanks
+from dials.util import detect_blanks, show_mail_handle_errors
 
 logger = logging.getLogger("dials.detect_blanks")
 
@@ -36,7 +36,8 @@
 """
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     from dials.util import log
     from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
@@ -159,4 +160,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/dials_import.py b/dials/command_line/dials_import.py
index 29c5caf8f..7ac7a7600 100644
--- a/dials/command_line/dials_import.py
+++ b/dials/command_line/dials_import.py
@@ -923,7 +923,11 @@ def print_sequence_diff(self, sequence1, sequence2, params):
         logger.info("\n".join(text))
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/estimate_gain.py b/dials/command_line/estimate_gain.py
index 066367a21..d8298f6db 100644
--- a/dials/command_line/estimate_gain.py
+++ b/dials/command_line/estimate_gain.py
@@ -1,11 +1,9 @@
 from __future__ import absolute_import, division, print_function
 
-import sys
-
 import iotbx.phil
 from scitbx.array_family import flex
 
-from dials.util import Sorry
+from dials.util import Sorry, show_mail_handle_errors
 from dials.util.options import OptionParser, flatten_experiments
 
 help_message = """
@@ -128,7 +126,8 @@ def estimate_gain(imageset, kernel_size=(10, 10), output_gain_map=None, max_imag
     return gain0
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.estimate_gain [options] models.expt"
 
     parser = OptionParser(
@@ -140,7 +139,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
 
     # Log the diff phil
     diff_phil = parser.diff_phil.as_str()
@@ -166,4 +165,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/estimate_resolution.py b/dials/command_line/estimate_resolution.py
index bc1040947..5e76a0ba9 100644
--- a/dials/command_line/estimate_resolution.py
+++ b/dials/command_line/estimate_resolution.py
@@ -11,7 +11,7 @@
 
 import libtbx.phil
 
-from dials.util import log, resolution_analysis
+from dials.util import log, resolution_analysis, show_mail_handle_errors
 from dials.util.multi_dataset_handling import parse_multiple_datasets
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 from dials.util.version import dials_version
@@ -39,7 +39,8 @@
 )
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.estimate_resolution [options] (scaled.expt scaled.refl | scaled_unmerged.mtz)"
 
     import libtbx.load_env
@@ -121,4 +122,4 @@ def output_html_report(plots, filename):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/export.py b/dials/command_line/export.py
index 4329fa798..e24f26c12 100644
--- a/dials/command_line/export.py
+++ b/dials/command_line/export.py
@@ -6,6 +6,8 @@
 from iotbx.phil import parse
 from libtbx import Auto
 
+from dials.util import log, show_mail_handle_errors
+
 logger = logging.getLogger("dials.command_line.export")
 
 help_message = """
@@ -427,8 +429,8 @@ def export_json(params, experiments, reflections):
     )
 
 
-if __name__ == "__main__":
-    from dials.util import log
+@show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, reflections_and_experiments_from_files
     from dials.util.version import dials_version
 
@@ -445,7 +447,7 @@ def export_json(params, experiments, reflections):
     )
 
     # Get the parameters
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
 
     # Configure the logging
     log.config(logfile=params.output.log)
@@ -500,3 +502,7 @@ def export_json(params, experiments, reflections):
         exporter(params, experiments, reflections)
     except Exception as e:
         sys.exit(e)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/export_best.py b/dials/command_line/export_best.py
index 72d23f5a8..17478443d 100644
--- a/dials/command_line/export_best.py
+++ b/dials/command_line/export_best.py
@@ -5,6 +5,8 @@
 
 from libtbx.phil import parse
 
+from dials.util import Sorry, log, show_mail_handle_errors
+
 logger = logging.getLogger("dials.command_line.export_best")
 
 help_message = """
@@ -93,8 +95,8 @@ def export(self):
         best.write_par_file("%s.par" % prefix, experiment)
 
 
-if __name__ == "__main__":
-    from dials.util import Sorry, log
+@show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, reflections_and_experiments_from_files
     from dials.util.version import dials_version
 
@@ -109,7 +111,7 @@ def export(self):
     )
 
     # Get the parameters
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
 
     # Configure the logging
     log.config(logfile=params.output.log)
@@ -134,3 +136,7 @@ def export(self):
 
     exporter = BestExporter(params, experiments, reflections)
     exporter.export()
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/export_bitmaps.py b/dials/command_line/export_bitmaps.py
index 64c66bc45..82789b734 100644
--- a/dials/command_line/export_bitmaps.py
+++ b/dials/command_line/export_bitmaps.py
@@ -9,7 +9,7 @@
 
 from dials.algorithms.image.threshold import DispersionThresholdDebug
 from dials.array_family import flex
-from dials.util import Sorry
+from dials.util import Sorry, show_mail_handle_errors
 from dials.util.image_viewer.slip_viewer.tile_generation import (
     get_flex_image,
     get_flex_image_multipanel,
@@ -100,7 +100,8 @@
 colour_schemes = {"greyscale": 0, "rainbow": 1, "heatmap": 2, "inverse_greyscale": 3}
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.export_bitmaps [options] models.expt | image.cbf"
 
     parser = OptionParser(
@@ -112,7 +113,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     experiments = flatten_experiments(params.input.experiments)
     if len(experiments) == 0:
@@ -307,4 +308,4 @@ def image_filter(
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/filter_reflections.py b/dials/command_line/filter_reflections.py
index dd9e77501..169f86588 100644
--- a/dials/command_line/filter_reflections.py
+++ b/dials/command_line/filter_reflections.py
@@ -405,7 +405,8 @@ def filter_by_dead_time(reflections, experiments, dead_time=0, reject_fraction=0
     return reflections.select(sel_good)
 
 
-def run():
+@show_mail_handle_errors()
+def run(args=None):
     """Run the command line filtering script."""
 
     flags = list(flex.reflection_table.flags.names.items())
@@ -426,7 +427,7 @@ def run():
         check_format=False,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -452,5 +453,4 @@ def run():
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/find_bad_pixels.py b/dials/command_line/find_bad_pixels.py
index e64dd73ac..8cf269ae6 100644
--- a/dials/command_line/find_bad_pixels.py
+++ b/dials/command_line/find_bad_pixels.py
@@ -9,6 +9,7 @@
 import iotbx.phil
 from scitbx.array_family import flex
 
+import dials.util
 from dials.algorithms.spot_finding.factory import SpotFinderFactory
 from dials.algorithms.spot_finding.factory import phil_scope as spot_phil
 from dials.util.options import OptionParser, flatten_experiments
@@ -108,7 +109,8 @@ def find_constant_signal_pixels(imageset, images):
     return total
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dev.dials.find_bad_pixels [options] data_master.h5"
 
     parser = OptionParser(
@@ -119,7 +121,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     experiments = flatten_experiments(params.input.experiments)
     if len(experiments) != 1:
@@ -181,4 +183,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/find_hot_pixels.py b/dials/command_line/find_hot_pixels.py
index 096ca4614..25f8d16a2 100644
--- a/dials/command_line/find_hot_pixels.py
+++ b/dials/command_line/find_hot_pixels.py
@@ -4,6 +4,7 @@
 
 import iotbx.phil
 
+import dials.util
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
 logger = logging.getLogger("dials.command_line.find_hot_pixels")
@@ -38,7 +39,8 @@
 """
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     import six.moves.cPickle as pickle
 
     from dials.util import Sorry, log
@@ -56,7 +58,7 @@ def run(args):
     )
 
     # Get the parameters
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
 
     # Configure the log
     log.config(verbosity=options.verbose, logfile="dials.find_hot_pixels.log")
@@ -125,6 +127,4 @@ def filter_reflections(reflections, depth):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/find_shared_models.py b/dials/command_line/find_shared_models.py
index 2aab1113b..cd465cb77 100644
--- a/dials/command_line/find_shared_models.py
+++ b/dials/command_line/find_shared_models.py
@@ -54,11 +54,11 @@ def __init__(self):
             check_format=False,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=False)
+        params, options = self.parser.parse_args(args, show_diff_phil=False)
 
         # Configure the logging
         log.config(verbosity=options.verbose, logfile=params.output.log)
@@ -147,7 +147,11 @@ def run(self):
         logger.info(tabulate(rows, headers="firstrow"))
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/find_spots.py b/dials/command_line/find_spots.py
index e296cfd0c..69463d6a5 100644
--- a/dials/command_line/find_spots.py
+++ b/dials/command_line/find_spots.py
@@ -224,7 +224,12 @@ def run(self, args=None):
             return reflections
 
 
-if __name__ == "__main__":
+@show_mail_handle_errors()
+def run(args=None):
     with show_mail_handle_errors():
         script = Script()
-        script.run()
+        script.run(args)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/find_spots_client.py b/dials/command_line/find_spots_client.py
index 7417d96ad..3c6affd16 100644
--- a/dials/command_line/find_spots_client.py
+++ b/dials/command_line/find_spots_client.py
@@ -14,6 +14,8 @@
 
 import libtbx.phil
 
+import dials.util
+
 
 def work(host, port, filename, params):
     conn = http.client.HTTPConnection(host, port)
@@ -205,10 +207,12 @@ def stop(host, port, nproc):
 """
 )
 
-if __name__ == "__main__":
+
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     import select
 
-    mixed_args = sys.argv[1:]
+    mixed_args = args or sys.argv[1:]
     if os.name != "nt":
         r, w, x = select.select([sys.stdin], [], [], 0)
         if len(r) > 0:
@@ -244,7 +248,7 @@ def stop(host, port, nproc):
     elif len(unhandled) and unhandled[0] == "ping":
         url = "http://%s:%i" % (params.host, params.port)
         try:
-            data = urllib.request.urlopen(url).read()
+            _ = urllib.request.urlopen(url).read()
             print("Success")
             sys.exit(0)
         except Exception:
@@ -267,3 +271,7 @@ def stop(host, port, nproc):
                 grid=params.grid,
                 nproc=nproc,
             )
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/find_spots_server.py b/dials/command_line/find_spots_server.py
index 3b9205921..9d86f354a 100644
--- a/dials/command_line/find_spots_server.py
+++ b/dials/command_line/find_spots_server.py
@@ -14,7 +14,7 @@
 
 import libtbx.phil
 
-from dials.util import Sorry
+from dials.util import Sorry, show_mail_handle_errors
 
 logger = logging.getLogger("dials.command_line.find_spots_server")
 
@@ -323,15 +323,20 @@ def main(nproc, port):
     print(time.asctime(), "done")
 
 
-if __name__ == "__main__":
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.find_spots_server [options]"
 
     from dials.util.options import OptionParser
 
     parser = OptionParser(usage=usage, phil=phil_scope, epilog=help_message)
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     if params.nproc is libtbx.Auto:
         from libtbx.introspection import number_of_processors
 
         params.nproc = number_of_processors(return_value_if_unknown=-1)
     main(params.nproc, params.port)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/frame_orientations.py b/dials/command_line/frame_orientations.py
index bc3195c0f..e215ba9f7 100644
--- a/dials/command_line/frame_orientations.py
+++ b/dials/command_line/frame_orientations.py
@@ -58,11 +58,11 @@ def __init__(self):
             epilog=__doc__,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         # Parse the command line
-        self.params, _ = self.parser.parse_args(show_diff_phil=True)
+        self.params, _ = self.parser.parse_args(args, show_diff_phil=True)
 
         if not self.params.input.experiments:
             self.parser.print_help()
@@ -230,7 +230,11 @@ def extract_experiment_data(exp, scale=1):
     }
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/generate_distortion_maps.py b/dials/command_line/generate_distortion_maps.py
index 1b5cde1ff..87d50240c 100644
--- a/dials/command_line/generate_distortion_maps.py
+++ b/dials/command_line/generate_distortion_maps.py
@@ -9,7 +9,7 @@
 from scitbx import matrix
 
 from dials.array_family import flex
-from dials.util import Sorry, log
+from dials.util import Sorry, log, show_mail_handle_errors
 from dials.util.options import OptionParser, flatten_experiments
 from dials.util.version import dials_version
 
@@ -168,7 +168,8 @@ def make_dx_dy_ellipse(imageset, phi, l1, l2, centre_xy):
     return distortion_map_x, distortion_map_y
 
 
-def main():
+@show_mail_handle_errors()
+def run(args=None):
     usage = "dials.generate_distortion_maps [options] image_*.cbf"
 
     parser = OptionParser(
@@ -180,7 +181,7 @@ def main():
         epilog=help_message,
     )
 
-    params, options = parser.parse_args()
+    params, options = parser.parse_args(args)
 
     # Configure the logging
     log.config(verbosity=options.verbose, logfile=params.output.log)
@@ -233,4 +234,4 @@ def main():
 
 
 if __name__ == "__main__":
-    main()
+    run()
diff --git a/dials/command_line/generate_mask.py b/dials/command_line/generate_mask.py
index 95d53d111..c229c955e 100644
--- a/dials/command_line/generate_mask.py
+++ b/dials/command_line/generate_mask.py
@@ -22,6 +22,7 @@
 
 import logging
 import os.path
+from typing import List, Optional, Tuple
 
 import six.moves.cPickle as pickle
 
@@ -35,12 +36,7 @@
 from dials.util.masking import MaskGenerator
 from dials.util.options import OptionParser, flatten_experiments
 
-try:
-    from typing import List, Optional, Tuple
-
-    Masks = List[Tuple[flex.bool, ...]]
-except ImportError:
-    pass
+Masks = List[Tuple[flex.bool, ...]]
 
 log = logging.getLogger("dials.generate_mask")
 
@@ -139,8 +135,8 @@ def generate_mask(
     return masks, experiments
 
 
-def run(phil=phil_scope, args=None):
-    # type: (phil.scope, List[str, ...]) -> None
+@dials.util.show_mail_handle_errors()
+def run(args: List[str] = None, phil: phil.scope = phil_scope) -> None:
     """
     Parse command-line arguments, run the script.
 
@@ -178,5 +174,4 @@ def run(phil=phil_scope, args=None):
 
 
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/generate_tutorial_text.py b/dials/command_line/generate_tutorial_text.py
index 9b02b8fe8..9e16ea6b9 100644
--- a/dials/command_line/generate_tutorial_text.py
+++ b/dials/command_line/generate_tutorial_text.py
@@ -14,7 +14,7 @@
 import dials_data.download
 
 
-def run(
+def _command_runner(
     command, output_directory=None, store_command=None, store_output=None, **kwargs
 ):
     """Run a command and write its output to a defined location"""
@@ -40,7 +40,9 @@ def generate_processing_detail_text_thaumatin(options):
     tmpdir = py.path.local("./tmp-thaumatin")
     tmpdir.ensure(dir=1)
     outdir = py.path.local(options.output).join("thaumatin")
-    runcmd = functools.partial(run, output_directory=outdir, working_directory=tmpdir)
+    runcmd = functools.partial(
+        _command_runner, output_directory=outdir, working_directory=tmpdir
+    )
 
     df = dials_data.download.DataFetcher()
     runcmd(["dials.import", df("thaumatin_i04").join("th_8_2_0*cbf")])
@@ -79,7 +81,9 @@ def generate_processing_detail_text_mpro_x0692(options):
     tmpdir = py.path.local("./tmp-mpro_x0692")
     tmpdir.ensure(dir=1)
     outdir = py.path.local(options.output).join("mpro_x0692")
-    runcmd = functools.partial(run, output_directory=outdir, working_directory=tmpdir)
+    runcmd = functools.partial(
+        _command_runner, output_directory=outdir, working_directory=tmpdir
+    )
 
     # Find/validate the data input - until we've decided to integrate this
     # into the main release, have a DLS default or otherwise let it be
@@ -142,7 +146,9 @@ def generate_processing_detail_text_betalactamase(options):
     tmpdir = py.path.local("./tmp-betalactamase")
     tmpdir.ensure(dir=1)
     outdir = py.path.local(options.output).join("betalactamase")
-    runcmd = functools.partial(run, output_directory=outdir, working_directory=tmpdir)
+    runcmd = functools.partial(
+        _command_runner, output_directory=outdir, working_directory=tmpdir
+    )
 
     # Find/validate the data input - until we've decided to integrate this
     # into the main release, have a DLS default or otherwise let it be
@@ -210,7 +216,9 @@ def generate_multi_crystal_symmetry_and_scaling(options):
     tmpdir = py.path.local(tempfile.mkdtemp("_multi_crystal", dir="."))
     tmpdir.ensure(dir=1)
     outdir = py.path.local(options.output).join("multi_crystal")
-    runcmd = functools.partial(run, output_directory=outdir, working_directory=tmpdir)
+    runcmd = functools.partial(
+        _command_runner, output_directory=outdir, working_directory=tmpdir
+    )
 
     df = dials_data.download.DataFetcher()
     experiment_files = sorted(
@@ -305,7 +313,7 @@ def extract_resolution(source, method):
     return float(resolution_line.split(":")[-1].strip())
 
 
-if __name__ == "__main__":
+def run(args=None):
     parser = OptionParser(
         description="Generate tutorial logs for DIALS documentation website"
     )
@@ -353,7 +361,7 @@ def extract_resolution(source, method):
         default=".",
         help="Write output to this location",
     )
-    options, _ = parser.parse_args()
+    options, _ = parser.parse_args(args)
 
     targets = []
     if options.beta:
@@ -373,3 +381,7 @@ def extract_resolution(source, method):
 
     for target in targets:
         target(options)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/geometry_viewer.py b/dials/command_line/geometry_viewer.py
index 8fdab7c53..270fd5733 100644
--- a/dials/command_line/geometry_viewer.py
+++ b/dials/command_line/geometry_viewer.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import, division, print_function
 
 import copy
+import sys
 
 import wx
 
@@ -14,7 +15,7 @@
 from scitbx.array_family import flex
 from scitbx.math import minimum_covering_sphere
 
-from dials.util import wx_viewer
+from dials.util import show_mail_handle_errors, wx_viewer
 
 help_message = """
 """
@@ -576,7 +577,8 @@ def initialize_modelview(self, eye_vector=None, angle=None):
         self.move_to_center_of_viewport(self.rotation_center)
 
 
-def run(args):
+@show_mail_handle_errors()
+def run(args=None):
 
     import os
 
@@ -592,7 +594,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(quick_parse=True, show_diff_phil=True)
+    params, options = parser.parse_args(args, quick_parse=True, show_diff_phil=True)
 
     if "DIALS_EXPORT_DO_NOT_CHECK_FORMAT" in os.environ:
         print(
@@ -671,6 +673,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/goniometer_calibration.py b/dials/command_line/goniometer_calibration.py
index 5635362a0..cc805b3cb 100644
--- a/dials/command_line/goniometer_calibration.py
+++ b/dials/command_line/goniometer_calibration.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import, division, print_function
 
-import sys
-
 import iotbx.phil
 from scitbx import matrix
 
+import dials.util
+
 help_message = """
 dials.goniometer_calibration is a tool to aid calibration of multi-axis
 goniometers.
@@ -40,7 +40,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.goniometer_calibration [options] models.expt"
@@ -53,7 +54,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     if not params.use_space_group_from_experiments and params.space_group is None:
         parser.print_help()
         return
@@ -197,4 +198,4 @@ def write_xoalign_config(file_name, axes, names):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/image_viewer.py b/dials/command_line/image_viewer.py
index 457a77e83..19935fc9b 100644
--- a/dials/command_line/image_viewer.py
+++ b/dials/command_line/image_viewer.py
@@ -168,7 +168,8 @@ def show_image_viewer(params, experiments, reflections):
     wrapper.display(experiments=experiments, reflections=reflections)
 
 
-if __name__ == "__main__":
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     import wx  # It is unclear why, but it is crucial that wx
 
     # is imported before the parser is run.
@@ -194,7 +195,7 @@ def show_image_viewer(params, experiments, reflections):
         read_experiments_from_images=True,
         epilog=help_message,
     )
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     experiments = [x.data for x in params.input.experiments]
     reflections = flatten_reflections(params.input.reflections)
 
@@ -215,3 +216,7 @@ def show_image_viewer(params, experiments, reflections):
             params.mask = pickle.load(f)
 
     show_image_viewer(params=params, reflections=reflections, experiments=experiments)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/import_xds.py b/dials/command_line/import_xds.py
index 593991007..c6d6f6966 100644
--- a/dials/command_line/import_xds.py
+++ b/dials/command_line/import_xds.py
@@ -418,12 +418,12 @@ def __init__(self):
         usage = "usage: dials.import_xds [options] (SPOT.XDS|INTEGRATE.HKL)"
         self.parser = OptionParser(usage=usage, phil=phil_scope)
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
 
         # Parse the command line arguments
         params, options, args = self.parser.parse_args(
-            show_diff_phil=True, return_unhandled=True
+            args, show_diff_phil=True, return_unhandled=True
         )
 
         # Check number of arguments
@@ -453,7 +453,11 @@ def select_importer(self, args):
             raise RuntimeError("expected (SPOT.XDS|INTEGRATE.HKL), got %s" % filename)
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/index.py b/dials/command_line/index.py
index 3d47f31bf..35776a1ce 100644
--- a/dials/command_line/index.py
+++ b/dials/command_line/index.py
@@ -12,7 +12,7 @@
 
 from dials.algorithms.indexing import DialsIndexError, indexer
 from dials.array_family import flex
-from dials.util import log
+from dials.util import log, show_mail_handle_errors
 from dials.util.multi_dataset_handling import renumber_table_id_columns
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 from dials.util.slice import slice_reflections
@@ -207,7 +207,8 @@ def index(experiments, reflections, params):
     return indexed_experiments, indexed_reflections
 
 
-def run(phil=working_phil, args=None):
+@show_mail_handle_errors()
+def run(args=None, phil=working_phil):
     usage = "dials.index [options] models.expt strong.refl"
 
     parser = OptionParser(
diff --git a/dials/command_line/integrate.py b/dials/command_line/integrate.py
index e0e978ffe..bfa3ae0c6 100644
--- a/dials/command_line/integrate.py
+++ b/dials/command_line/integrate.py
@@ -627,6 +627,7 @@ def refl_extend(src, dest, eid):
     return experiments, reflections, report
 
 
+@show_mail_handle_errors()
 def run(args=None, phil=phil_scope):
     """Run the integration command line script."""
     usage = "usage: dials.integrate [options] models.expt"
@@ -699,5 +700,4 @@ def run(args=None, phil=phil_scope):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/make_sphinx_html.py b/dials/command_line/make_sphinx_html.py
index 25a288271..f444c9b7a 100644
--- a/dials/command_line/make_sphinx_html.py
+++ b/dials/command_line/make_sphinx_html.py
@@ -11,7 +11,8 @@
 
 import dials
 
-if __name__ == "__main__":
+
+def run(args=None):
     dials_dir = py.path.local(dials.__file__).dirpath()
     sphinx_dir = dials_dir / "doc" / "sphinx"
     tutorial_doc_dir = sphinx_dir / "documentation" / "tutorials"
@@ -75,7 +76,7 @@
         default=False,
         help="Build documentation in parallel",
     )
-    options, _ = parser.parse_args()
+    options, _ = parser.parse_args(args)
 
     output_dir = py.path.local(options.output)
     if options.clean:
@@ -121,3 +122,7 @@
     )
     if result.returncode:
         sys.exit("Sphinx build failed with exit code %d" % result.returncode)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/merge.py b/dials/command_line/merge.py
index ef7462ffd..fc24f8e75 100644
--- a/dials/command_line/merge.py
+++ b/dials/command_line/merge.py
@@ -120,6 +120,7 @@ def merge_data_to_mtz(params, experiments, reflections):
     return make_merged_mtz_file(*((params, list(wavelengths)[0]) + merged_data))
 
 
+@show_mail_handle_errors()
 def run(args=None):
     """Run the merging from the command-line."""
     usage = """Usage: dials.merge scaled.refl scaled.expt [options]"""
@@ -185,5 +186,4 @@ def run(args=None):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/merge_cbf.py b/dials/command_line/merge_cbf.py
index 6a064d0ee..540383710 100644
--- a/dials/command_line/merge_cbf.py
+++ b/dials/command_line/merge_cbf.py
@@ -5,6 +5,8 @@
 
 import iotbx.phil
 
+import dials.util
+
 help_message = """
 
 This program can be used to merge a given number of consecutive cbf files into
@@ -212,7 +214,8 @@ def merge_cbf(imageset, n_images, out_prefix="sum_", get_raw_data_from_imageset=
         print("%s written" % out_image)
 
 
-def run():
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.merge_cbf [options] image_*.cbf"
@@ -226,7 +229,7 @@ def run():
     )
 
     params, options, args = parser.parse_args(
-        show_diff_phil=True, return_unhandled=True
+        args, show_diff_phil=True, return_unhandled=True
     )
 
     n_images = params.merge_n_images
diff --git a/dials/command_line/merge_reflection_lists.py b/dials/command_line/merge_reflection_lists.py
index f4a51230c..1331b5c2f 100644
--- a/dials/command_line/merge_reflection_lists.py
+++ b/dials/command_line/merge_reflection_lists.py
@@ -48,10 +48,10 @@ def __init__(self):
             epilog=help_message, usage=usage, phil=phil_scope, read_reflections=True
         )
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         # Parse the command line arguments
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         if len(params.input.reflections) == 0:
             self.parser.print_help()
             return
@@ -83,7 +83,11 @@ def run(self):
         Command.end("Wrote %d reflections to %s" % (len(table), params.output))
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/missing_reflections.py b/dials/command_line/missing_reflections.py
index 9f18d15c9..c65c7c762 100644
--- a/dials/command_line/missing_reflections.py
+++ b/dials/command_line/missing_reflections.py
@@ -42,7 +42,8 @@
 )
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) -> None
+@dials.util.show_mail_handle_errors()
+def run(args: List[str] = None, phil: libtbx.phil.scope = phil_scope) -> None:
     usage = "dials.missing_reflections [options] scaled.expt scaled.refl"
 
     parser = OptionParser(
@@ -139,5 +140,4 @@ def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) ->
 
 
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/model_background.py b/dials/command_line/model_background.py
index 2f8045e54..0a21abff9 100644
--- a/dials/command_line/model_background.py
+++ b/dials/command_line/model_background.py
@@ -203,7 +203,7 @@ def __init__(self):
             usage=usage, phil=phil_scope, epilog=help_message, read_experiments=True
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
         from dials.algorithms.background.modeller import BackgroundModeller
         from dials.array_family import flex
@@ -211,7 +211,7 @@ def run(self):
         from dials.util.options import flatten_experiments
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=False)
+        params, options = self.parser.parse_args(args, show_diff_phil=False)
 
         # Configure the logging
         dials.util.log.config(verbosity=options.verbose, logfile=params.output.log)
@@ -285,7 +285,11 @@ def run(self):
         # image_generator.save_polar_model(params.output.polar_model_image_prefix)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/modify_geometry.py b/dials/command_line/modify_geometry.py
index bcd1d5c28..38cb2a697 100644
--- a/dials/command_line/modify_geometry.py
+++ b/dials/command_line/modify_geometry.py
@@ -2,6 +2,8 @@
 
 import libtbx.phil
 
+import dials.util
+
 help_message = """
 """
 
@@ -17,7 +19,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.modify_geometry [options] models.expt"
@@ -30,7 +33,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     experiments = flatten_experiments(params.input.experiments)
 
     if len(experiments) == 0:
@@ -57,6 +60,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/plot_Fo_vs_Fc.py b/dials/command_line/plot_Fo_vs_Fc.py
index b499e7178..64390e057 100644
--- a/dials/command_line/plot_Fo_vs_Fc.py
+++ b/dials/command_line/plot_Fo_vs_Fc.py
@@ -196,11 +196,11 @@ def _plot(self):
         print("Saving plot to {0}".format(self.params.plot_filename))
         plt.savefig(self.params.plot_filename)
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         # Parse the command line
-        self.params, _ = self.parser.parse_args(show_diff_phil=True)
+        self.params, _ = self.parser.parse_args(args, show_diff_phil=True)
 
         if self.params.hklin is None:
             self.parser.print_help()
@@ -246,7 +246,11 @@ def hyperbola(x, c):
         return
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/plot_reflections.py b/dials/command_line/plot_reflections.py
index 2a5dd2cb4..50e15d87b 100644
--- a/dials/command_line/plot_reflections.py
+++ b/dials/command_line/plot_reflections.py
@@ -2,6 +2,7 @@
 
 import iotbx.phil
 
+import dials.util
 from dials.util import Sorry
 
 master_phil_scope = iotbx.phil.parse(
@@ -33,7 +34,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.plot_reflections models.expt observations.refl [options]"
     from scitbx import matrix
     from scitbx.array_family import flex
@@ -48,7 +50,7 @@ def run(args):
         check_format=False,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -212,6 +214,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/plot_scan_varying_model.py b/dials/command_line/plot_scan_varying_model.py
index d923ac0b5..0db976aad 100644
--- a/dials/command_line/plot_scan_varying_model.py
+++ b/dials/command_line/plot_scan_varying_model.py
@@ -90,13 +90,13 @@ def __init__(self):
             epilog=help_message,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         from scitbx import matrix
 
         from dials.util.options import flatten_experiments
 
-        params, options = self.parser.parse_args()
+        params, options = self.parser.parse_args(args)
         if len(params.input.experiments) == 0:
             self.parser.print_help()
             return
@@ -406,7 +406,11 @@ def plot_beam_centre(self, dat):
         plt.savefig(fullname)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/plugins.py b/dials/command_line/plugins.py
index dc7fd4c8f..b1b7bfd3a 100644
--- a/dials/command_line/plugins.py
+++ b/dials/command_line/plugins.py
@@ -4,6 +4,8 @@
 
 import pkg_resources
 
+import dials.util
+
 BOLD = "\033[1m"
 RED = "\033[1;31m"
 GREEN = "\033[32m"
@@ -56,7 +58,9 @@ def installation_is_valid():
     },
 }
 
-if __name__ == "__main__":
+
+@dials.util.show_mail_handle_errors()
+def run(_=None):
     for ep, ep_dict in known_entry_points.items():
         print(
             "{BOLD}{ep}{NC}  {ep_dict[description]}".format(
@@ -78,3 +82,7 @@ def installation_is_valid():
                 print(" {RED}{p}{NC}".format(NC=NC, p=p, RED=RED))
         print()
     sys.exit(not installation_is_valid())
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/precommitbx.py b/dials/command_line/precommitbx.py
index 21c1b080e..5119fe8cc 100644
--- a/dials/command_line/precommitbx.py
+++ b/dials/command_line/precommitbx.py
@@ -4,4 +4,10 @@
 
 import dials.precommitbx.installer
 
-dials.precommitbx.installer.main()
+
+def run(_=None):
+    dials.precommitbx.installer.main()
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/predict.py b/dials/command_line/predict.py
index fdd8b9c89..b4b2cc3e7 100644
--- a/dials/command_line/predict.py
+++ b/dials/command_line/predict.py
@@ -71,10 +71,10 @@ def __init__(self):
             read_experiments=True,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
 
         # Check the number of experiments
         experiments = flatten_experiments(params.input.experiments)
@@ -135,7 +135,11 @@ def run(self):
         )
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/reciprocal_lattice_viewer.py b/dials/command_line/reciprocal_lattice_viewer.py
index e2e9470e8..d50696d52 100644
--- a/dials/command_line/reciprocal_lattice_viewer.py
+++ b/dials/command_line/reciprocal_lattice_viewer.py
@@ -3,7 +3,6 @@
 from __future__ import absolute_import, division, print_function
 
 import copy
-import sys
 
 import wxtbx.app
 from scitbx.array_family import flex
@@ -23,7 +22,9 @@
 """
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    dials.util.log.print_banner()
     usage = "dials.reciprocal_lattice_viewer [options] models.expt observations.refl"
 
     parser = OptionParser(
@@ -35,7 +36,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -71,5 +72,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    dials.util.log.print_banner()
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/refine.py b/dials/command_line/refine.py
index c61465ff1..4f45dfa03 100644
--- a/dials/command_line/refine.py
+++ b/dials/command_line/refine.py
@@ -306,6 +306,7 @@ def run_dials_refine(experiments, reflections, params):
     return experiments, reflections, refiner, history
 
 
+@dials.util.show_mail_handle_errors()
 def run(args=None, phil=working_phil):
     """
     Set up refinement from command line options, files and PHIL parameters.
@@ -482,5 +483,4 @@ def run(args=None, phil=working_phil):
 
 
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/refine_bravais_settings.py b/dials/command_line/refine_bravais_settings.py
index e65e60711..e0513d2e4 100644
--- a/dials/command_line/refine_bravais_settings.py
+++ b/dials/command_line/refine_bravais_settings.py
@@ -39,6 +39,7 @@
 from cctbx.sgtbx import bravais_types
 from dxtbx.model import ExperimentList
 
+import dials.util
 from dials.algorithms.indexing.bravais_settings import (
     refined_settings_from_refined_triclinic,
 )
@@ -145,6 +146,7 @@ def select_datasets_on_crystal_id(experiments, reflections, crystal_id):
     return experiments, reflections
 
 
+@dials.util.show_mail_handle_errors()
 def run(args=None):
     usage = "dials.refine_bravais_settings indexed.expt indexed.refl [options]"
 
diff --git a/dials/command_line/refine_error_model.py b/dials/command_line/refine_error_model.py
index 14a98b51e..544161e21 100644
--- a/dials/command_line/refine_error_model.py
+++ b/dials/command_line/refine_error_model.py
@@ -16,6 +16,7 @@
 
 from jinja2 import ChoiceLoader, Environment, PackageLoader
 
+import libtbx.phil
 from iotbx import phil
 
 from dials.algorithms.scaling.combine_intensities import combine_intensities
@@ -162,7 +163,8 @@ def make_output(model, params):
             json.dump(d, outfile)
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
+@show_mail_handle_errors()
+def run(args: List[str] = None, phil: libtbx.phil.scope = phil_scope) -> None:
     """Run the scaling from the command-line."""
     usage = """Usage: dials.refine_error_model scaled.refl scaled.expt [options]"""
 
@@ -199,5 +201,4 @@ def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/reflection_viewer.py b/dials/command_line/reflection_viewer.py
index 8dd2c097d..bd6fb49dd 100644
--- a/dials/command_line/reflection_viewer.py
+++ b/dials/command_line/reflection_viewer.py
@@ -1,6 +1,8 @@
 # LIBTBX_PRE_DISPATCHER_INCLUDE_SH export PHENIX_GUI_ENVIRONMENT=1
 from __future__ import absolute_import, division, print_function
 
+import dials.util
+
 help_message = """
 
 This program is used to view the reflections with debugging purposes.
@@ -26,13 +28,13 @@ def __init__(self):
             usage=usage, epilog=help_message, read_reflections=True
         )
 
-    def run(self):
+    def run(self, args=None):
 
         from dials.util.options import flatten_reflections
         from dials.viewer.viewer_interface import extract_n_show
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         table = flatten_reflections(params.input.reflections)
         if len(table) == 0:
             self.parser.print_help()
@@ -41,6 +43,11 @@ def run(self):
         extract_n_show(table[0])
 
 
-if __name__ == "__main__":
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     script = Script()
-    script.run()
+    script.run(args)
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/reindex.py b/dials/command_line/reindex.py
index a54ce39a4..7c9ac0494 100644
--- a/dials/command_line/reindex.py
+++ b/dials/command_line/reindex.py
@@ -12,6 +12,7 @@
 from cctbx import sgtbx
 from rstbx.symmetry.constraints import parameter_reduction
 
+import dials.util
 from dials.algorithms.indexing.assign_indices import AssignIndicesGlobal
 from dials.array_family import flex
 from dials.util.filter_reflections import filtered_arrays_from_experiments_reflections
@@ -154,7 +155,8 @@ def reindex_experiments(experiments, cb_op, space_group=None):
     return reindexed_experiments
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     import libtbx.load_env
 
     from dials.util import Sorry
@@ -170,7 +172,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
 
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
@@ -352,6 +354,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/report.py b/dials/command_line/report.py
index b0119999a..d4e1cdf63 100644
--- a/dials/command_line/report.py
+++ b/dials/command_line/report.py
@@ -2530,12 +2530,12 @@ def __init__(self):
         )
         dials.util.log.print_banner()
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         from dials.util.options import reflections_and_experiments_from_files
 
         # Parse the command line arguments
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
 
         # Show the help
         if len(params.input.reflections) != 1 and not len(params.input.experiments):
@@ -2560,7 +2560,11 @@ def run(self):
         analyse(reflections, experiments)
 
 
+@show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/rl_csv.py b/dials/command_line/rl_csv.py
index 99d3bed82..468110eeb 100644
--- a/dials/command_line/rl_csv.py
+++ b/dials/command_line/rl_csv.py
@@ -9,6 +9,7 @@
 import iotbx.phil
 from dxtbx.model import ExperimentList
 
+import dials.util
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
 phil_scope = iotbx.phil.parse(
@@ -28,7 +29,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dev.dials.csv [options] imported.expt strong.refl output.csv=rl.csv"
 
     parser = OptionParser(
@@ -39,7 +41,7 @@ def run(args):
         check_format=False,
     )
 
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -97,6 +99,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/rl_png.py b/dials/command_line/rl_png.py
index 094ffcab1..6138a47f3 100644
--- a/dials/command_line/rl_png.py
+++ b/dials/command_line/rl_png.py
@@ -9,6 +9,7 @@
 from scitbx import matrix
 from scitbx.array_family import flex
 
+import dials.util
 from dials.algorithms.indexing.indexer import find_max_cell
 from dials.command_line.search_beam_position import run_dps
 from dials.util.reciprocal_lattice import Render3d
@@ -132,7 +133,8 @@ def plot(self, filename, n=(1, 0, 0)):
         pyplot.close()
 
 
-def run():
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util import log
     from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
@@ -147,7 +149,7 @@ def run():
         epilog=help_message,
     )
 
-    params, options = parser.parse_args()
+    params, options = parser.parse_args(args)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
diff --git a/dials/command_line/rs_mapper.py b/dials/command_line/rs_mapper.py
index 6f7970408..328bce20d 100644
--- a/dials/command_line/rs_mapper.py
+++ b/dials/command_line/rs_mapper.py
@@ -7,7 +7,8 @@
 from scitbx.array_family import flex
 
 import dials.algorithms.rs_mapper as recviewer
-from dials.util import Sorry, show_mail_handle_errors
+import dials.util
+from dials.util import Sorry
 from dials.util.options import OptionParser, flatten_experiments
 
 help_message = """
@@ -70,9 +71,9 @@ def __init__(self):
             usage=usage, phil=phil_scope, epilog=help_message, read_experiments=True
         )
 
-    def run(self):
+    def run(self, args=None):
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
 
         if not params.rs_mapper.map_file:
             raise RuntimeError("Please specify output map file (map_file=)")
@@ -159,7 +160,11 @@ def process_imageset(self, imageset):
             )
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/scale.py b/dials/command_line/scale.py
index aec1ffade..6ef5a3763 100644
--- a/dials/command_line/scale.py
+++ b/dials/command_line/scale.py
@@ -197,7 +197,8 @@ def run_scaling(params, experiments, reflections):
         return experiments, joint_table
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
+@show_mail_handle_errors()
+def run(args: List[str] = None, phil: phil.scope = phil_scope) -> None:
     """Run the scaling from the command-line."""
     usage = """Usage: dials.scale integrated.refl integrated.expt
 [integrated.refl(2) integrated.expt(2) ....] [options]"""
@@ -255,5 +256,4 @@ def run(args=None, phil=phil_scope):  # type: (List[str], phil.scope) -> None
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/search_beam_position.py b/dials/command_line/search_beam_position.py
index 97568ad60..99fce2502 100644
--- a/dials/command_line/search_beam_position.py
+++ b/dials/command_line/search_beam_position.py
@@ -7,7 +7,6 @@
 import logging
 import math
 import random
-import sys
 
 import iotbx.phil
 import libtbx.introspection
@@ -21,6 +20,7 @@
 from scitbx.array_family import flex
 from scitbx.simplex import simplex_opt
 
+import dials.util
 from dials.algorithms.indexing.indexer import find_max_cell
 from dials.util import Sorry, log
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
@@ -458,7 +458,8 @@ def discover_better_experimental_model(
     return new_experiments
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.search_beam_position [options] imported.expt strong.refl"
 
     parser = OptionParser(
@@ -531,4 +532,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/sequence_to_stills.py b/dials/command_line/sequence_to_stills.py
index f41687bf1..687f02573 100644
--- a/dials/command_line/sequence_to_stills.py
+++ b/dials/command_line/sequence_to_stills.py
@@ -189,6 +189,7 @@ def sequence_to_stills(experiments, reflections, params):
     return (new_experiments, new_reflections)
 
 
+@show_mail_handle_errors()
 def run(args=None, phil=phil_scope):
     """
     Validate the arguments and load experiments/reflections for sequence_to_stills
@@ -229,5 +230,4 @@ def run(args=None, phil=phil_scope):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/shadow_plot.py b/dials/command_line/shadow_plot.py
index 792b0e65c..c71f66850 100644
--- a/dials/command_line/shadow_plot.py
+++ b/dials/command_line/shadow_plot.py
@@ -9,6 +9,7 @@
 import libtbx.phil
 from scitbx.array_family import flex
 
+import dials.util
 from dials.util import Sorry
 
 help_message = """
@@ -43,7 +44,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     usage = "dials.shadow_plot [options] models.expt"
@@ -56,7 +58,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     experiments = flatten_experiments(params.input.experiments)
 
     if len(experiments) == 0:
@@ -199,4 +201,4 @@ def polygon_area(points):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/show.py b/dials/command_line/show.py
index 3c06f3f7d..8cf15c99d 100644
--- a/dials/command_line/show.py
+++ b/dials/command_line/show.py
@@ -2,6 +2,7 @@
 
 import collections
 import os
+import sys
 
 import numpy as np
 
@@ -10,6 +11,7 @@
 from dxtbx.model.experiment_list import ExperimentListFactory
 from scitbx.math import five_number_summary
 
+import dials.util
 from dials.array_family import flex
 from dials.util import Sorry, tabulate
 
@@ -181,7 +183,8 @@ def show_goniometer(goniometer):
     return s
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     import dials.util.log
 
     dials.util.log.print_banner()
@@ -691,6 +694,4 @@ def format_column(key, data, format_strings=None):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/show_extensions.py b/dials/command_line/show_extensions.py
index 944c1455b..0af6cb849 100644
--- a/dials/command_line/show_extensions.py
+++ b/dials/command_line/show_extensions.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import, division, print_function
 
-from dials.util import show_mail_handle_errors
+import dials.util
 
 
 class Script(object):
@@ -27,12 +27,12 @@ def __init__(self):
         usage = "dev.dials.show_extensions [options] /path/to/image/files"
         self.parser = OptionParser(usage=usage, phil=phil_scope)
 
-    def run(self):
+    def run(self, args=None):
         """Run the script."""
         import dials.extensions
 
         # Parse the command line arguments
-        params, options = self.parser.parse_args()
+        params, options = self.parser.parse_args(args)
 
         # Create the list of interfaces
         interfaces = [
@@ -80,7 +80,11 @@ def run(self):
                                 print("  phil:\n%s" % phil)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/show_test_failure_reasons.py b/dials/command_line/show_test_failure_reasons.py
index 927657d26..88d3909e3 100644
--- a/dials/command_line/show_test_failure_reasons.py
+++ b/dials/command_line/show_test_failure_reasons.py
@@ -5,53 +5,57 @@
 import re
 import xml.etree.ElementTree as ET
 
-try:
-    tree = ET.parse("output.xml")
-except IOError:
-    exit(
-        "generate output.xml with:\n"
-        "pytest --regression -n auto --runxfail --junit-xml=output.xml"
-    )
-broken = tree.findall("testcase/failure") + tree.findall("testcase/error")
-find_error_source = re.compile(
-    r"\n((?:(?:/[^:\n]+/(?:modules|build)/[^:\n]+)|(?:[a-zA-Z][a-zA-Z0-9_./]*\.py)):[0-9]+):"
-)
-
-cause = {}
-example = {}
-for test in tree.iter("testcase"):
-    for broken in test.findall("failure") + test.findall("error"):
-        error_message = broken.attrib["message"]
-        source = find_error_source.findall(broken.text)
-        if source:
-            error_message = source[-1]
-        cause[error_message] = cause.setdefault(error_message, 0) + 1
-        example[error_message] = {
-            "source": "{t.attrib[file]}::{t.attrib[name]}".format(t=test),
-            "text": broken.text,
-        }
-
-top_causes = sorted(((v, k) for k, v in cause.items()), reverse=True)
-
-
-def filtered_output(output):
-    lines = output.split("\n")
-    error_lines = [n for n, line in enumerate(lines) if line.startswith(">")]
-    if not error_lines:
-        return ""
-    return "\n".join(lines[error_lines[-1] :])
-
-
-NC = "\033[0m"
-RED = "\033[1;31m"
-YELLOW = "\033[1;33m"
-
-for cause in top_causes[:5]:
-    print("{RED}{cause[0]}x {cause[1]}".format(RED=RED, cause=cause))
-    print(
-        "{YELLOW}pytest --regression --runxfail {source}{NC}".format(
-            source=example[cause[1]]["source"], YELLOW=YELLOW, NC=NC
+
+def run(_=None):
+    try:
+        tree = ET.parse("output.xml")
+    except IOError:
+        exit(
+            "generate output.xml with:\n"
+            "pytest --regression -n auto --runxfail --junit-xml=output.xml"
         )
+    broken = tree.findall("testcase/failure") + tree.findall("testcase/error")
+    find_error_source = re.compile(
+        r"\n((?:(?:/[^:\n]+/(?:modules|build)/[^:\n]+)|(?:[a-zA-Z][a-zA-Z0-9_./]*\.py)):[0-9]+):"
     )
-    print(filtered_output(example[cause[1]]["text"]))
-    print()
+
+    cause = {}
+    example = {}
+    for test in tree.iter("testcase"):
+        for broken in test.findall("failure") + test.findall("error"):
+            error_message = broken.attrib["message"]
+            source = find_error_source.findall(broken.text)
+            if source:
+                error_message = source[-1]
+            cause[error_message] = cause.setdefault(error_message, 0) + 1
+            example[error_message] = {
+                "source": "{t.attrib[file]}::{t.attrib[name]}".format(t=test),
+                "text": broken.text,
+            }
+
+    top_causes = sorted(((v, k) for k, v in cause.items()), reverse=True)
+
+    def filtered_output(output):
+        lines = output.split("\n")
+        error_lines = [n for n, line in enumerate(lines) if line.startswith(">")]
+        if not error_lines:
+            return ""
+        return "\n".join(lines[error_lines[-1] :])
+
+    NC = "\033[0m"
+    RED = "\033[1;31m"
+    YELLOW = "\033[1;33m"
+
+    for cause in top_causes[:5]:
+        print("{RED}{cause[0]}x {cause[1]}".format(RED=RED, cause=cause))
+        print(
+            "{YELLOW}pytest --regression --runxfail {source}{NC}".format(
+                source=example[cause[1]]["source"], YELLOW=YELLOW, NC=NC
+            )
+        )
+        print(filtered_output(example[cause[1]]["text"]))
+        print()
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/command_line/slice_sequence.py b/dials/command_line/slice_sequence.py
index e0e9e764f..e590a6df5 100644
--- a/dials/command_line/slice_sequence.py
+++ b/dials/command_line/slice_sequence.py
@@ -4,8 +4,9 @@
 
 from dxtbx.model.experiment_list import ExperimentList
 
+import dials.util
 from dials.algorithms.refinement.refinement_helpers import calculate_frame_numbers
-from dials.util import Sorry, show_mail_handle_errors
+from dials.util import Sorry
 from dials.util.slice import slice_experiments, slice_reflections
 
 help_message = """
@@ -114,13 +115,13 @@ def __init__(self):
             epilog=help_message,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         from dials.util.options import reflections_and_experiments_from_files
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         reflections, experiments = reflections_and_experiments_from_files(
             params.input.reflections, params.input.experiments
         )
@@ -234,7 +235,11 @@ def run(self):
         return
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/sort_reflections.py b/dials/command_line/sort_reflections.py
index cd6605399..4ca195694 100644
--- a/dials/command_line/sort_reflections.py
+++ b/dials/command_line/sort_reflections.py
@@ -55,12 +55,12 @@ def sort_permutation(column, reverse=False):
         perm = sorted(indices, key=lambda k: column[k], reverse=reverse)
         return flex.size_t(perm)
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
         from dials.util.options import flatten_reflections
 
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
         reflections = flatten_reflections(params.input.reflections)
         if not reflections:
             self.parser.print_help()
@@ -89,7 +89,11 @@ def run(self):
             reflections.as_file(params.output)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Sort()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Sort()
-        script.run()
+    run()
diff --git a/dials/command_line/split_experiments.py b/dials/command_line/split_experiments.py
index 027d020b3..72901431f 100644
--- a/dials/command_line/split_experiments.py
+++ b/dials/command_line/split_experiments.py
@@ -5,8 +5,9 @@
 from dxtbx.model.experiment_list import ExperimentList
 from libtbx.phil import parse
 
+import dials.util
 from dials.array_family import flex
-from dials.util import Sorry, show_mail_handle_errors
+from dials.util import Sorry
 from dials.util.export_mtz import match_wavelengths
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
@@ -98,11 +99,11 @@ def __init__(self):
             epilog=help_message,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         # Parse the command line
-        params, _ = self.parser.parse_args(show_diff_phil=True)
+        params, _ = self.parser.parse_args(args, show_diff_phil=True)
 
         # Try to load the models and data
         if not params.input.experiments:
@@ -336,7 +337,11 @@ def save_chunk(chunk_id, expts, refls):
         return
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/spot_counts_per_image.py b/dials/command_line/spot_counts_per_image.py
index f07e7dbf6..c3a565c5f 100644
--- a/dials/command_line/spot_counts_per_image.py
+++ b/dials/command_line/spot_counts_per_image.py
@@ -5,6 +5,7 @@
 
 import iotbx.phil
 
+import dials.util
 from dials.algorithms.spot_finding import per_image_analysis
 from dials.util import tabulate
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
@@ -40,7 +41,8 @@
 )
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.spot_counts_per_image [options] imported.expt strong.refl"
 
     parser = OptionParser(
@@ -52,7 +54,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -128,4 +130,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/spot_resolution_shells.py b/dials/command_line/spot_resolution_shells.py
index 415fedc2c..f11867b87 100644
--- a/dials/command_line/spot_resolution_shells.py
+++ b/dials/command_line/spot_resolution_shells.py
@@ -2,6 +2,8 @@
 
 import libtbx.phil
 
+import dials.util
+
 help_message = """
 
 Compute resolution-wise distribution of spots
@@ -37,7 +39,8 @@ def spot_resolution_shells(experiments, reflections, params):
         print("%d %f %d" % (j, d[j], n[j]))
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, reflections_and_experiments_from_files
 
     usage = "dials.spot_resolution_shells [options] models.expt observations.refl"
@@ -51,7 +54,7 @@ def run(args):
         epilog=help_message,
     )
 
-    params, options = parser.parse_args(show_diff_phil=True)
+    params, options = parser.parse_args(args, show_diff_phil=True)
     reflections, experiments = reflections_and_experiments_from_files(
         params.input.reflections, params.input.experiments
     )
@@ -66,6 +69,4 @@ def run(args):
 
 
 if __name__ == "__main__":
-    import sys
-
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/stereographic_projection.py b/dials/command_line/stereographic_projection.py
index 39b2ea4a2..3b475fe67 100644
--- a/dials/command_line/stereographic_projection.py
+++ b/dials/command_line/stereographic_projection.py
@@ -13,6 +13,8 @@
 from cctbx.array_family import flex
 from scitbx import matrix
 
+import dials.util
+
 help_message = """
 
 Calculates a stereographic projection image for the given crystal models and
@@ -157,7 +159,8 @@ def gcd_list(l):
     return result
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     from dials.util.options import OptionParser, flatten_experiments
 
     # The script usage
@@ -481,4 +484,4 @@ def projections_as_json(projections, filename=None, labels=None):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/stills_process.py b/dials/command_line/stills_process.py
index d525521ab..166302839 100644
--- a/dials/command_line/stills_process.py
+++ b/dials/command_line/stills_process.py
@@ -353,7 +353,7 @@ def load_reference_geometry(self):
             assert len(ref_experiments.detectors()) == 1
             self.reference_detector = ref_experiments.detectors()[0]
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
         from libtbx import easy_mp
 
@@ -370,7 +370,7 @@ def run(self):
         if rank == 0:
             # Parse the command line
             params, options, all_paths = self.parser.parse_args(
-                show_diff_phil=False, return_unhandled=True, quick_parse=True
+                args, show_diff_phil=False, return_unhandled=True, quick_parse=True
             )
 
             if params.input.glob:
@@ -1661,7 +1661,11 @@ def extend_with_bookkeeping(
                 tar.close()
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/symmetry.py b/dials/command_line/symmetry.py
index 93fb01a2d..64d47e00f 100644
--- a/dials/command_line/symmetry.py
+++ b/dials/command_line/symmetry.py
@@ -15,6 +15,7 @@
 from dxtbx.model import ExperimentList
 from libtbx import Auto
 
+import dials.util
 from dials.algorithms.merging.merge import prepare_merged_reflection_table
 from dials.algorithms.symmetry import resolution_filter_from_reflections_experiments
 from dials.algorithms.symmetry.absences.laue_groups_info import (
@@ -27,7 +28,7 @@
 from dials.algorithms.symmetry.laue_group import LaueGroupAnalysis
 from dials.array_family import flex
 from dials.command_line.reindex import reindex_experiments
-from dials.util import log, show_mail_handle_errors, tabulate
+from dials.util import log, tabulate
 from dials.util.exclude_images import (
     exclude_image_ranges_from_scans,
     get_selection_for_valid_image_ranges,
@@ -510,6 +511,7 @@ def _reindex_experiments_reflections(experiments, reflections, space_group, cb_o
 """
 
 
+@dials.util.show_mail_handle_errors()
 def run(args=None):
     """Run symmetry analysis from the command-line."""
     usage = "dials.symmetry [options] models.expt observations.refl"
@@ -565,5 +567,4 @@ def run(args=None):
 
 
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/command_line/two_theta_offset.py b/dials/command_line/two_theta_offset.py
index 4ee89a9b1..533258d3a 100644
--- a/dials/command_line/two_theta_offset.py
+++ b/dials/command_line/two_theta_offset.py
@@ -6,7 +6,7 @@
 from scitbx import matrix
 from scitbx.math import r3_rotation_axis_and_angle_from_matrix
 
-from dials.util import show_mail_handle_errors
+import dials.util
 from dials.util.options import OptionParser, flatten_experiments
 
 help_message = """
@@ -47,10 +47,10 @@ def __init__(self):
             read_experiments=True,
         )
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
         # Parse the command line
-        params, options = self.parser.parse_args(show_diff_phil=True)
+        params, options = self.parser.parse_args(args, show_diff_phil=True)
 
         # Check the number of experiments is at least 2
         experiments = flatten_experiments(params.input.experiments)
@@ -162,7 +162,11 @@ def find_centre_of_rotation(x1, x2, y1, y2):
     return oy + d * ny, axis
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/two_theta_refine.py b/dials/command_line/two_theta_refine.py
index 76a147fd6..c1e53012f 100644
--- a/dials/command_line/two_theta_refine.py
+++ b/dials/command_line/two_theta_refine.py
@@ -12,6 +12,7 @@
 from libtbx.phil import parse
 from libtbx.utils import format_float_with_standard_uncertainty
 
+import dials.util
 from dials.algorithms.refinement.corrgram import create_correlation_plots
 from dials.algorithms.refinement.engine import LevenbergMarquardtIterations as Refinery
 from dials.algorithms.refinement.engine import refinery_phil_scope
@@ -29,7 +30,7 @@
     TwoThetaTarget,
 )
 from dials.array_family import flex
-from dials.util import log, show_mail_handle_errors, tabulate
+from dials.util import log, tabulate
 from dials.util.filter_reflections import filter_reflection_table
 from dials.util.multi_dataset_handling import parse_multiple_datasets
 from dials.util.options import OptionParser, reflections_and_experiments_from_files
@@ -417,11 +418,11 @@ def generate_mmcif(crystal, refiner, filename):
         with open(filename, "w") as fh:
             cif.show(out=fh)
 
-    def run(self):
+    def run(self, args=None):
         """Execute the script."""
 
         # Parse the command line
-        params, _ = self.parser.parse_args(show_diff_phil=False)
+        params, _ = self.parser.parse_args(args, show_diff_phil=False)
 
         # set up global reflections list
         reflections = flex.reflection_table()
@@ -537,7 +538,11 @@ def run(self):
             self.generate_mmcif(crystals[0], refiner, filename=params.output.mmcif)
 
 
+@dials.util.show_mail_handle_errors()
+def run(args=None):
+    script = Script()
+    script.run(args)
+
+
 if __name__ == "__main__":
-    with show_mail_handle_errors():
-        script = Script()
-        script.run()
+    run()
diff --git a/dials/command_line/unit_cell_histogram.py b/dials/command_line/unit_cell_histogram.py
index 7f2f413fd..96afea8b3 100644
--- a/dials/command_line/unit_cell_histogram.py
+++ b/dials/command_line/unit_cell_histogram.py
@@ -2,7 +2,6 @@
 
 import logging
 import math
-import sys
 
 import numpy as np
 
@@ -10,6 +9,7 @@
 from scitbx.array_family import flex
 from scitbx.math import five_number_summary
 
+import dials.util
 from dials.algorithms.clustering.observers import uc_params_from_experiments
 from dials.util import log
 from dials.util.options import OptionParser, flatten_experiments
@@ -57,7 +57,8 @@ def outlier_selection(uc_params, iqr_ratio=1.5):
     return outliers
 
 
-def run(args):
+@dials.util.show_mail_handle_errors()
+def run(args=None):
     usage = "dials.unit_cell_histogram [options] models.expt"
 
     parser = OptionParser(
@@ -70,7 +71,7 @@ def run(args):
 
     logger.info(dials_version())
 
-    params, options = parser.parse_args(show_diff_phil=False)
+    params, options = parser.parse_args(args, show_diff_phil=False)
     experiments = flatten_experiments(params.input.experiments)
 
     if len(experiments) == 0:
@@ -253,4 +254,4 @@ def plot_number_of_crystals(experiments):
 
 
 if __name__ == "__main__":
-    run(sys.argv[1:])
+    run()
diff --git a/dials/command_line/version.py b/dials/command_line/version.py
index b810d1778..d63d92ed1 100644
--- a/dials/command_line/version.py
+++ b/dials/command_line/version.py
@@ -13,4 +13,9 @@ def version():
     print("Installed in: %s" % os.path.split(dials.__file__)[0])
 
 
-version()
+def run(args=None):
+    version()
+
+
+if __name__ == "__main__":
+    run()
diff --git a/dials/doc/examples/boilerplate.py b/dials/doc/examples/boilerplate.py
index 62bc97e20..dae1d9db0 100644
--- a/dials/doc/examples/boilerplate.py
+++ b/dials/doc/examples/boilerplate.py
@@ -104,7 +104,8 @@ def do_boilerplate(
     return experiments, reflections
 
 
-def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) -> None
+@dials.util.show_mail_on_error()
+def run(args: List[str] = None, phil: libtbx.phil.scope = phil_scope) -> None:
     """
     Check command-line input and call other functions to do the legwork.
 
@@ -162,7 +163,6 @@ def run(args=None, phil=phil_scope):  # type: (List[str], libtbx.phil.scope) ->
     reflections.as_file(params.output.reflections)
 
 
-# Keep this minimal.  Try to keep the command-line behaviour neatly encapsulated in run.
+# Keep this minimal. Calling run() should do exactly the same thing as running this
 if __name__ == "__main__":
-    with dials.util.show_mail_handle_errors():
-        run()
+    run()
diff --git a/dials/newsfragments/1435.misc b/dials/newsfragments/1435.misc
new file mode 100644
index 000000000..a7707a134
--- /dev/null
+++ b/dials/newsfragments/1435.misc
@@ -0,0 +1 @@
+Unify calling conventions for command_line/ scripts
diff --git a/dials/util/__init__.py b/dials/util/__init__.py
index 793a67e2a..40b78aa8b 100644
--- a/dials/util/__init__.py
+++ b/dials/util/__init__.py
@@ -1,6 +1,7 @@
 import contextlib
 import faulthandler
 import functools
+import io
 import os
 import signal
 import sys
@@ -146,11 +147,20 @@ def __exit__(self, *args, **kwargs):
     return DCM(name, log_func)
 
 
+@contextlib.contextmanager
+def enable_faulthandler():
+    # Don't clobber someone elses faulthandler settings
+    if not faulthandler.is_enabled():
+        # SIGUSR2 not available on windows
+        # The attached STDERR might not support what faulthandler wants
+        with contextlib.suppress(AttributeError, io.UnsupportedOperation):
+            faulthandler.enable()
+            faulthandler.register(signal.SIGUSR2, all_threads=True)
+    yield
+
+
 @contextlib.contextmanager
 def show_mail_on_error():
-    faulthandler.enable()
-    with contextlib.suppress(AttributeError):
-        faulthandler.register(signal.SIGUSR2, all_threads=True)
     try:
         yield
     except Exception as e:
@@ -192,5 +202,5 @@ def show_mail_handle_errors():
     the error to. If a sys.exit is caught, it will be converted to red, if
     appropriate.
     """
-    with make_sys_exit_red(), show_mail_on_error():
+    with enable_faulthandler(), make_sys_exit_red(), show_mail_on_error():
         yield

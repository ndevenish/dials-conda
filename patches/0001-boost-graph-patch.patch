diff --git a/cctbx_project/boost_adaptbx/graph/clustering_algorithm_ext.cpp b/cctbx_project/boost_adaptbx/graph/clustering_algorithm_ext.cpp
index 58559fae9..80866a6fe 100644
--- a/cctbx_project/boost_adaptbx/graph/clustering_algorithm_ext.cpp
+++ b/cctbx_project/boost_adaptbx/graph/clustering_algorithm_ext.cpp
@@ -11,6 +11,50 @@
 #include <boost/graph/graph_traits.hpp>
 #include <boost/graph/bc_clustering.hpp>

+#if _LIBCPP_VERSION && (BOOST_VERSION < 107300)
+namespace boost_fix {
+// Since boost::Graph doesn't work with newer libc++, reimplement without max_element
+// see https://github.com/boostorg/graph/issues/175
+template <typename MutableGraph, typename Done, typename EdgeCentralityMap,
+          typename VertexIndexMap>
+void betweenness_centrality_clustering(MutableGraph& g, Done done,
+                                       EdgeCentralityMap edge_centrality,
+                                       VertexIndexMap vertex_index) {
+  using namespace boost;
+  typedef
+      typename property_traits<EdgeCentralityMap>::value_type centrality_type;
+  typedef typename graph_traits<MutableGraph>::edge_iterator edge_iterator;
+  typedef typename graph_traits<MutableGraph>::edge_descriptor edge_descriptor;
+
+  if (has_no_edges(g)) return;
+
+  // Function object that compares the centrality of edges
+  indirect_cmp<EdgeCentralityMap, std::less<centrality_type> > cmp(
+      edge_centrality);
+
+  bool is_done;
+  do {
+    brandes_betweenness_centrality(
+        g, edge_centrality_map(edge_centrality).vertex_index_map(vertex_index));
+    std::pair<edge_iterator, edge_iterator> edges_iters = edges(g);
+
+    edge_iterator& it = edges_iters.first;
+    edge_iterator it_max = it;
+    while (++it != edges_iters.second) {
+      if (cmp(*it_max, *it)) it_max = it;
+    }
+    // Here we assume graph is not empty and contains at least one edge.
+    edge_descriptor e = *it_max;
+
+    // edge_descriptor e =
+    //     *boost::max_element(edges_iters.first, edges_iters.second, cmp);
+    is_done = done(get(edge_centrality, e), e, g);
+    if (!is_done) remove_edge(e, g);
+  } while (!is_done && !has_no_edges(g));
+}
+}  // namespace boost_fix
+#endif
+

 namespace boost_adaptbx
 {
@@ -30,16 +74,24 @@ struct betweenness_centrality_clustering_export
     double const& threshold
     )
   {
-    using namespace boost;
     index_map_type index_map( graph );
     edge_centrality_map_type edge_centrality_map( graph );

+#if _LIBCPP_VERSION && (BOOST_VERSION < 107300)
+    boost_fix::betweenness_centrality_clustering(
+      graph,
+      boost::bc_clustering_threshold< double >( threshold, graph, false ),
+      edge_centrality_map.get(),
+      index_map.get()
+      );
+#else
     boost::betweenness_centrality_clustering(
       graph,
       boost::bc_clustering_threshold< double >( threshold, graph, false ),
       edge_centrality_map.get(),
       index_map.get()
       );
+#endif

     boost::python::dict edge_centrality_dict;
     edge_iterator ei, ej;
